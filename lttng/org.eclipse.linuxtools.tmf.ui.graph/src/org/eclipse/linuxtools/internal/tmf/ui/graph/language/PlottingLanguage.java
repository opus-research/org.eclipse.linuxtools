/* Generated By:JavaCC: Do not edit this line. PlottingLanguage.java */
package org.eclipse.linuxtools.internal.tmf.ui.graph.language;

import org.eclipse.linuxtools.internal.tmf.ui.graph.expression.PlottingAddExpression;
import org.eclipse.linuxtools.internal.tmf.ui.graph.expression.PlottingExpression;
import org.eclipse.linuxtools.internal.tmf.ui.graph.expression.PlottingFieldExpression;
import org.eclipse.linuxtools.internal.tmf.ui.graph.expression.PlottingLiteralExpression;
import org.eclipse.linuxtools.internal.tmf.ui.graph.expression.PlottingMinusExpression;
import org.eclipse.linuxtools.internal.tmf.ui.graph.expression.PlottingMultExpression;
import org.eclipse.linuxtools.internal.tmf.ui.graph.expression.PlottingPreviousFieldExpression;
import org.eclipse.linuxtools.internal.tmf.ui.graph.expression.PlottingPreviousRankExpression;
import org.eclipse.linuxtools.internal.tmf.ui.graph.expression.PlottingPreviousTimestampExpression;
import org.eclipse.linuxtools.internal.tmf.ui.graph.expression.PlottingRankExpression;
import org.eclipse.linuxtools.internal.tmf.ui.graph.expression.PlottingTimestampExpression;

@SuppressWarnings("all")
public class PlottingLanguage implements PlottingLanguageConstants {

    final public PlottingExpression completeExpression() throws ParseException {
        PlottingExpression ret;
        ret = Expression();
        jj_consume_token(0);
        {
            if (true)
                return ret;
        }
        throw new Error("Missing return statement in function");
    }

    final public PlottingExpression Expression() throws ParseException {
        PlottingExpression ret;
        PlottingExpression tmp;
        ret = MultiplicativeExpression();
        label_1: while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case PLUS:
            case MINUS:
                ;
                break;
            default:
                jj_la1[0] = jj_gen;
                break label_1;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case PLUS:
                jj_consume_token(PLUS);
                tmp = MultiplicativeExpression();
                ret = new PlottingAddExpression(ret, tmp);
                break;
            case MINUS:
                jj_consume_token(MINUS);
                tmp = MultiplicativeExpression();
                ret = new PlottingMinusExpression(ret, tmp);
                break;
            default:
                jj_la1[1] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        {
            if (true)
                return ret;
        }
        throw new Error("Missing return statement in function");
    }

    final public PlottingExpression MultiplicativeExpression() throws ParseException {
        PlottingExpression ret;
        PlottingExpression tmp;
        ret = PrimaryExpression();
        label_2: while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case MULTIPLY:
            case DIVIDE:
                ;
                break;
            default:
                jj_la1[2] = jj_gen;
                break label_2;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case MULTIPLY:
                jj_consume_token(MULTIPLY);
                tmp = PrimaryExpression();
                ret = new PlottingMultExpression(ret, tmp);
                break;
            case DIVIDE:
                jj_consume_token(DIVIDE);
                tmp = PrimaryExpression();
                ret = new PlottingMultExpression(ret, tmp);
                break;
            default:
                jj_la1[3] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        {
            if (true)
                return ret;
        }
        throw new Error("Missing return statement in function");
    }

    final public PlottingExpression PrimaryExpression() throws ParseException {
        PlottingExpression ret;
        double tmp;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
            tmp = Literal();
            {
                if (true)
                    return new PlottingLiteralExpression(tmp);
            }
            break;
        case EVENT:
            jj_consume_token(EVENT);
            jj_consume_token(26);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case TIMESTAMP:
                jj_consume_token(TIMESTAMP);
                ret = new PlottingTimestampExpression();
                {
                    if (true)
                        return ret;
                }
                break;
            case RANK:
                jj_consume_token(RANK);
                ret = new PlottingRankExpression();
                {
                    if (true)
                        return ret;
                }
                break;
            case IDENTIFIER:
                jj_consume_token(IDENTIFIER);
                ret = new PlottingFieldExpression(token.image);
                {
                    if (true)
                        return ret;
                }
                break;
            default:
                jj_la1[4] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
        case PREVIOUS:
            jj_consume_token(PREVIOUS);
            jj_consume_token(26);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case TIMESTAMP:
                jj_consume_token(TIMESTAMP);
                ret = new PlottingPreviousTimestampExpression();
                {
                    if (true)
                        return ret;
                }
                break;
            case RANK:
                jj_consume_token(RANK);
                ret = new PlottingPreviousRankExpression();
                {
                    if (true)
                        return ret;
                }
                break;
            case IDENTIFIER:
                jj_consume_token(IDENTIFIER);
                ret = new PlottingPreviousFieldExpression(token.image);
                {
                    if (true)
                        return ret;
                }
                break;
            default:
                jj_la1[5] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
        case LEFT_PARENTHESIS:
            jj_consume_token(LEFT_PARENTHESIS);
            ret = Expression();
            jj_consume_token(RIGHT_PARENTHESIS);
            {
                if (true)
                    return ret;
            }
            break;
        default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final public double Literal() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case INTEGER_LITERAL:
            jj_consume_token(INTEGER_LITERAL);
            {
                if (true)
                    return Long.parseLong(token.image);
            }
            break;
        case FLOATING_POINT_LITERAL:
            jj_consume_token(FLOATING_POINT_LITERAL);
            {
                if (true)
                    return Double.parseDouble(token.image);
            }
            break;
        default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    /** Generated Token Manager. */
    public PlottingLanguageTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /** Current token. */
    public Token token;
    /** Next token. */
    public Token jj_nt;
    private int jj_ntk;
    private int jj_gen;
    final private int[] jj_la1 = new int[8];
    static private int[] jj_la1_0;
    static {
        jj_la1_init_0();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[] { 0x60, 0x60, 0x180, 0x180, 0xe000, 0xe000, 0x241a00, 0x240000, };
    }

    /** Constructor with InputStream. */
    public PlottingLanguage(java.io.InputStream stream) {
        this(stream, null);
    }

    /** Constructor with InputStream and supplied encoding */
    public PlottingLanguage(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new PlottingLanguageTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 8; i++)
            jj_la1[i] = -1;
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 8; i++)
            jj_la1[i] = -1;
    }

    /** Constructor. */
    public PlottingLanguage(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new PlottingLanguageTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 8; i++)
            jj_la1[i] = -1;
    }

    /** Reinitialise. */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 8; i++)
            jj_la1[i] = -1;
    }

    /** Constructor with generated Token Manager. */
    public PlottingLanguage(PlottingLanguageTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 8; i++)
            jj_la1[i] = -1;
    }

    /** Reinitialise. */
    public void ReInit(PlottingLanguageTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 8; i++)
            jj_la1[i] = -1;
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    /** Get the next Token. */
    final public Token getNextToken() {
        if (token.next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null)
                t = t.next;
            else
                t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private final java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;

    /** Generate ParseException. */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[27];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 8; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 27; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /** Enable tracing. */
    final public void enable_tracing() {
    }

    /** Disable tracing. */
    final public void disable_tracing() {
    }

}
