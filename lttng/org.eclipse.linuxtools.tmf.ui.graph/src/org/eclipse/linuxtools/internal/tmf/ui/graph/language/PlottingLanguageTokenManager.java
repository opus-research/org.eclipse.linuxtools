/* Generated By:JavaCC: Do not edit this line. PlottingLanguageTokenManager.java */
package org.eclipse.linuxtools.internal.tmf.ui.graph.language;

/** Token Manager. */
@SuppressWarnings("all")
public class PlottingLanguageTokenManager implements PlottingLanguageConstants {

    /** Debug output. */
    public java.io.PrintStream debugStream = System.out;

    /** Set debug output. */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0) {
        switch (pos) {
        case 0:
            if ((active0 & 0x7800L) != 0L) {
                jjmatchedKind = 15;
                return 1;
            }
            if ((active0 & 0x4000000L) != 0L)
                return 6;
            return -1;
        case 1:
            if ((active0 & 0x7800L) != 0L) {
                jjmatchedKind = 15;
                jjmatchedPos = 1;
                return 1;
            }
            return -1;
        case 2:
            if ((active0 & 0x7800L) != 0L) {
                jjmatchedKind = 15;
                jjmatchedPos = 2;
                return 1;
            }
            return -1;
        case 3:
            if ((active0 & 0x3800L) != 0L) {
                jjmatchedKind = 15;
                jjmatchedPos = 3;
                return 1;
            }
            if ((active0 & 0x4000L) != 0L)
                return 1;
            return -1;
        case 4:
            if ((active0 & 0x3000L) != 0L) {
                jjmatchedKind = 15;
                jjmatchedPos = 4;
                return 1;
            }
            if ((active0 & 0x800L) != 0L)
                return 1;
            return -1;
        case 5:
            if ((active0 & 0x3000L) != 0L) {
                jjmatchedKind = 15;
                jjmatchedPos = 5;
                return 1;
            }
            return -1;
        case 6:
            if ((active0 & 0x3000L) != 0L) {
                jjmatchedKind = 15;
                jjmatchedPos = 6;
                return 1;
            }
            return -1;
        case 7:
            if ((active0 & 0x1000L) != 0L)
                return 1;
            if ((active0 & 0x2000L) != 0L) {
                jjmatchedKind = 15;
                jjmatchedPos = 7;
                return 1;
            }
            return -1;
        default:
            return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
        case 40:
            return jjStopAtPos(0, 9);
        case 41:
            return jjStopAtPos(0, 10);
        case 42:
            return jjStopAtPos(0, 7);
        case 43:
            return jjStopAtPos(0, 5);
        case 45:
            return jjStopAtPos(0, 6);
        case 46:
            return jjStartNfaWithStates_0(0, 26, 6);
        case 47:
            return jjStopAtPos(0, 8);
        case 101:
            return jjMoveStringLiteralDfa1_0(0x800L);
        case 112:
            return jjMoveStringLiteralDfa1_0(0x1000L);
        case 114:
            return jjMoveStringLiteralDfa1_0(0x4000L);
        case 116:
            return jjMoveStringLiteralDfa1_0(0x2000L);
        default:
            return jjMoveNfa_0(0, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch (curChar) {
        case 97:
            return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
        case 105:
            return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
        case 114:
            return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
        case 118:
            return jjMoveStringLiteralDfa2_0(active0, 0x800L);
        default:
            break;
        }
        return jjStartNfa_0(0, active0);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(0, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0);
            return 2;
        }
        switch (curChar) {
        case 101:
            return jjMoveStringLiteralDfa3_0(active0, 0x1800L);
        case 109:
            return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
        case 110:
            return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
        default:
            break;
        }
        return jjStartNfa_0(1, active0);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(1, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0);
            return 3;
        }
        switch (curChar) {
        case 101:
            return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
        case 107:
            if ((active0 & 0x4000L) != 0L)
                return jjStartNfaWithStates_0(3, 14, 1);
            break;
        case 110:
            return jjMoveStringLiteralDfa4_0(active0, 0x800L);
        case 118:
            return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
        default:
            break;
        }
        return jjStartNfa_0(2, active0);
    }

    private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(2, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0);
            return 4;
        }
        switch (curChar) {
        case 105:
            return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
        case 115:
            return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
        case 116:
            if ((active0 & 0x800L) != 0L)
                return jjStartNfaWithStates_0(4, 11, 1);
            break;
        default:
            break;
        }
        return jjStartNfa_0(3, active0);
    }

    private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(3, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0);
            return 5;
        }
        switch (curChar) {
        case 111:
            return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
        case 116:
            return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
        default:
            break;
        }
        return jjStartNfa_0(4, active0);
    }

    private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(4, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0);
            return 6;
        }
        switch (curChar) {
        case 97:
            return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
        case 117:
            return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
        default:
            break;
        }
        return jjStartNfa_0(5, active0);
    }

    private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(5, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, active0);
            return 7;
        }
        switch (curChar) {
        case 109:
            return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
        case 115:
            if ((active0 & 0x1000L) != 0L)
                return jjStartNfaWithStates_0(7, 12, 1);
            break;
        default:
            break;
        }
        return jjStartNfa_0(6, active0);
    }

    private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(6, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(7, active0);
            return 8;
        }
        switch (curChar) {
        case 112:
            if ((active0 & 0x2000L) != 0L)
                return jjStartNfaWithStates_0(8, 13, 1);
            break;
        default:
            break;
        }
        return jjStartNfa_0(7, active0);
    }

    private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 42;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                    case 0:
                        if ((0x3ff000000000000L & l) != 0L)
                            jjCheckNAddStates(0, 6);
                        else if (curChar == 46)
                            jjCheckNAdd(6);
                        if ((0x3fe000000000000L & l) != 0L) {
                            if (kind > 18)
                                kind = 18;
                            jjCheckNAddTwoStates(3, 4);
                        } else if (curChar == 48)
                            jjAddStates(7, 9);
                        break;
                    case 1:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 15)
                            kind = 15;
                        jjstateSet[jjnewStateCnt++] = 1;
                        break;
                    case 2:
                        if ((0x3fe000000000000L & l) == 0L)
                            break;
                        if (kind > 18)
                            kind = 18;
                        jjCheckNAddTwoStates(3, 4);
                        break;
                    case 3:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 18)
                            kind = 18;
                        jjCheckNAddTwoStates(3, 4);
                        break;
                    case 5:
                        if (curChar == 46)
                            jjCheckNAdd(6);
                        break;
                    case 6:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 21)
                            kind = 21;
                        jjCheckNAddStates(10, 12);
                        break;
                    case 8:
                        if ((0x280000000000L & l) != 0L)
                            jjCheckNAdd(9);
                        break;
                    case 9:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 21)
                            kind = 21;
                        jjCheckNAddTwoStates(9, 10);
                        break;
                    case 11:
                        if ((0x3ff000000000000L & l) != 0L)
                            jjCheckNAddStates(0, 6);
                        break;
                    case 12:
                        if ((0x3ff000000000000L & l) != 0L)
                            jjCheckNAddStates(13, 15);
                        break;
                    case 14:
                        if ((0x280000000000L & l) != 0L)
                            jjCheckNAdd(15);
                        break;
                    case 15:
                        if ((0x3ff000000000000L & l) != 0L)
                            jjCheckNAddTwoStates(15, 10);
                        break;
                    case 16:
                        if ((0x3ff000000000000L & l) != 0L)
                            jjCheckNAddTwoStates(16, 17);
                        break;
                    case 18:
                        if ((0x280000000000L & l) != 0L)
                            jjCheckNAdd(19);
                        break;
                    case 19:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 21)
                            kind = 21;
                        jjCheckNAddTwoStates(19, 10);
                        break;
                    case 20:
                        if ((0x3ff000000000000L & l) != 0L)
                            jjCheckNAddTwoStates(20, 21);
                        break;
                    case 21:
                        if (curChar != 46)
                            break;
                        if (kind > 21)
                            kind = 21;
                        jjCheckNAddStates(16, 18);
                        break;
                    case 22:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 21)
                            kind = 21;
                        jjCheckNAddStates(16, 18);
                        break;
                    case 24:
                        if ((0x280000000000L & l) != 0L)
                            jjCheckNAdd(25);
                        break;
                    case 25:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 21)
                            kind = 21;
                        jjCheckNAddTwoStates(25, 10);
                        break;
                    case 26:
                        if (curChar == 48)
                            jjAddStates(7, 9);
                        break;
                    case 28:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 18)
                            kind = 18;
                        jjCheckNAddTwoStates(28, 4);
                        break;
                    case 30:
                        if ((0x3ff000000000000L & l) != 0L)
                            jjAddStates(19, 20);
                        break;
                    case 31:
                        if (curChar == 46)
                            jjCheckNAdd(32);
                        break;
                    case 32:
                        if ((0x3ff000000000000L & l) != 0L)
                            jjCheckNAddTwoStates(32, 33);
                        break;
                    case 34:
                        if ((0x280000000000L & l) != 0L)
                            jjCheckNAdd(35);
                        break;
                    case 35:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 21)
                            kind = 21;
                        jjCheckNAddTwoStates(35, 10);
                        break;
                    case 37:
                        if ((0x3ff000000000000L & l) != 0L)
                            jjCheckNAddStates(21, 23);
                        break;
                    case 38:
                        if (curChar == 46)
                            jjCheckNAdd(39);
                        break;
                    case 40:
                        if ((0x280000000000L & l) != 0L)
                            jjCheckNAdd(41);
                        break;
                    case 41:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 21)
                            kind = 21;
                        jjCheckNAddTwoStates(41, 10);
                        break;
                    default:
                        break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                    case 0:
                    case 1:
                        if ((0x7fffffe87fffffeL & l) == 0L)
                            break;
                        if (kind > 15)
                            kind = 15;
                        jjCheckNAdd(1);
                        break;
                    case 4:
                        if ((0x100000001000L & l) != 0L && kind > 18)
                            kind = 18;
                        break;
                    case 7:
                        if ((0x2000000020L & l) != 0L)
                            jjAddStates(24, 25);
                        break;
                    case 10:
                        if ((0x5000000050L & l) != 0L && kind > 21)
                            kind = 21;
                        break;
                    case 13:
                        if ((0x2000000020L & l) != 0L)
                            jjAddStates(26, 27);
                        break;
                    case 17:
                        if ((0x2000000020L & l) != 0L)
                            jjAddStates(28, 29);
                        break;
                    case 23:
                        if ((0x2000000020L & l) != 0L)
                            jjAddStates(30, 31);
                        break;
                    case 27:
                        if ((0x100000001000000L & l) != 0L)
                            jjCheckNAdd(28);
                        break;
                    case 28:
                        if ((0x7e0000007eL & l) == 0L)
                            break;
                        if (kind > 18)
                            kind = 18;
                        jjCheckNAddTwoStates(28, 4);
                        break;
                    case 29:
                        if ((0x100000001000000L & l) != 0L)
                            jjCheckNAddTwoStates(30, 31);
                        break;
                    case 30:
                        if ((0x7e0000007eL & l) != 0L)
                            jjCheckNAddTwoStates(30, 31);
                        break;
                    case 32:
                        if ((0x7e0000007eL & l) != 0L)
                            jjAddStates(32, 33);
                        break;
                    case 33:
                        if ((0x1000000010000L & l) != 0L)
                            jjAddStates(34, 35);
                        break;
                    case 36:
                        if ((0x100000001000000L & l) != 0L)
                            jjCheckNAdd(37);
                        break;
                    case 37:
                        if ((0x7e0000007eL & l) != 0L)
                            jjCheckNAddStates(21, 23);
                        break;
                    case 39:
                        if ((0x1000000010000L & l) != 0L)
                            jjAddStates(36, 37);
                        break;
                    default:
                        break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                    default:
                        break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 42 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = { 12, 13, 10, 16, 17, 20, 21, 27, 29, 36, 6, 7, 10, 12, 13, 10, 22, 23, 10, 30,
            31, 37, 38, 39, 8, 9, 14, 15, 18, 19, 24, 25, 32, 33, 34, 35, 40, 41, };

    /** Token literal values. */
    public static final String[] jjstrLiteralImages = { "", null, null, null, null, "\53", "\55", "\52", "\57", "\50",
            "\51", "\145\166\145\156\164", "\160\162\145\166\151\157\165\163", "\164\151\155\145\163\164\141\155\160",
            "\162\141\156\153", null, null, null, null, null, null, null, null, null, null, null, "\56", };

    /** Lexer state names. */
    public static final String[] lexStateNames = { "DEFAULT", };
    static final long[] jjtoToken = { 0x424ffe1L, };
    static final long[] jjtoSkip = { 0x1eL, };
    protected SimpleCharStream input_stream;
    private final int[] jjrounds = new int[42];
    private final int[] jjstateSet = new int[84];
    protected char curChar;

    /** Constructor. */
    public PlottingLanguageTokenManager(SimpleCharStream stream) {
        if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        input_stream = stream;
    }

    /** Constructor. */
    public PlottingLanguageTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    /** Reinitialise parser. */
    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 42; i-- > 0;)
            jjrounds[i] = 0x80000000;
    }

    /** Reinitialise parser. */
    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /** Switch to specified lex state. */
    public void SwitchTo(int lexState) {
        if (lexState >= 1 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
                    TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    /** Get the next Token. */
    public Token getNextToken() {
        Token matchedToken;
        int curPos = 0;

        EOFLoop: for (;;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            try {
                input_stream.backup(0);
                while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
                    curChar = input_stream.BeginToken();
            } catch (java.io.IOException e1) {
                continue EOFLoop;
            }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos)
                    input_stream.backup(curPos - jjmatchedPos - 1);
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    return matchedToken;
                } else {
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else
                    error_column++;
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
                    TokenMgrError.LEXICAL_ERROR);
        }
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

}
