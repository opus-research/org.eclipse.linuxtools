####################################################################
# Copyright (c) 2012 Ericsson
# 
# All rights reserved. This program and the accompanying materials are
# made available under the terms of the Eclipse Public License v1.0 which
# accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#  
# Contributors: 
#    Bernd Hufmann - Initial API and implementation
####################################################################
####################################################################
# Scenario: Test lttng not installed
####################################################################
<SCENARIO>
LttngNotInstalled
<COMMAND_INPUT>
lttng list 
</COMMAND_INPUT>
<COMMAND_RESULT>
1
</COMMAND_RESULT>
<COMMAND_OUTPUT>
Command not found
</COMMAND_OUTPUT>
</SCENARIO>

####################################################################
# Scenario: Test lttng version
####################################################################
<SCENARIO>
LttngVersion
<COMMAND_INPUT>
lttng version 
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
lttng version 2.0.0 - Annedd'ale
Web site: http://lttng.org/

lttng is free software and under the GPL license and part LGPL
</COMMAND_OUTPUT>
</SCENARIO>

####################################################################
# Scenario: Test lttng version
# output with prompt
####################################################################
<SCENARIO>
LttngVersionWithPrompt
<COMMAND_INPUT>
lttng version 
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
Prompt> lttng version 2.0.0 - Annedd'ale
Web site: http://lttng.org/

lttng is free software and under the GPL license and part LGPL
</COMMAND_OUTPUT>
</SCENARIO>

####################################################################
# Scenario: Test lttng version (unsupported version)
####################################################################
<SCENARIO>
LttngUnsupportedVersion
<COMMAND_INPUT>
lttng version 
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
lttng version 200.0.0 - Annedd'ale
Web site: http://lttng.org/

lttng is free software and under the GPL license and part LGPL
</COMMAND_OUTPUT>
</SCENARIO>


####################################################################
# Scenario: Test lttng version (noversion)
####################################################################
<SCENARIO>
LttngNoVersion
<COMMAND_INPUT>
lttng version 
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
Web site: http://lttng.org/

lttng is free software and under the GPL license and part LGPL
</COMMAND_OUTPUT>
</SCENARIO>

####################################################################
# Scenario: Test no sessions available
####################################################################
<SCENARIO>
NoSessionAvailable
<COMMAND_INPUT>
lttng list 
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
Currently no available tracing session
</COMMAND_OUTPUT>
</SCENARIO>

####################################################################
# Scenario: Test get sessions
####################################################################
<SCENARIO>
GetSessionNames1
<COMMAND_INPUT>
lttng list 
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
Available tracing sessions:
  1) mysession1 (/home/user/lttng-traces/mysession1-20120123-083928) [inactive]
  2) mysession (/home/user/lttng-traces/mysession-20120123-083318) [inactive]

 Use lttng list <session_name> for more details
</COMMAND_OUTPUT>
</SCENARIO>

####################################################################
# Scenario: Test lttng list <name> where session doesn't exist 
####################################################################
<SCENARIO>
GetSessionNameNotExist
<COMMAND_INPUT>
lttng list test
</COMMAND_INPUT>
<COMMAND_RESULT>
1
</COMMAND_RESULT>
<COMMAND_OUTPUT>
Session test not found
Error: Session name not found
</COMMAND_OUTPUT>
</SCENARIO>

####################################################################
# Scenario: Test lttng list with garbage output 
####################################################################
<SCENARIO>
GetSessionGarbageOut
<COMMAND_INPUT>
lttng list 
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
asdfaereafsdcv 12333456434&*89**(())(^%$*
@#$%^&*()@#$%^&*()0834523094578kj;djkfs
a;sdf094v5u dsafj;sd9
</COMMAND_OUTPUT>
</SCENARIO>

####################################################################
# Scenario: Test lttng list <name> with sample outputs 
####################################################################
<SCENARIO>
GetSession1
<COMMAND_INPUT>
lttng list mysession
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
Tracing session mysession: [active]                                                                    
    Trace path: /home/user/lttng-traces/mysession-20120129-084256

=== Domain: Kernel ===

Channels:
-------------
- channel0: [enabled]

    Attributes:
      overwrite mode: 0
      subbufers size: 262144
      number of subbufers: 4
      switch timer interval: 0
      read timer interval: 200
      output: splice()

    Events:
      block_rq_remap (loglevel: TRACE_EMERG (0)) (type: tracepoint) [enabled]
      block_bio_remap (loglevel: TRACE_EMERG (0)) (type: tracepoint) [disabled]

- channel1: [disabled]

    Attributes:
      overwrite mode: 1
      subbufers size: 524288
      number of subbufers: 4
      switch timer interval: 100
      read timer interval: 400
      output: splice()

    Events:
      None

=== Domain: UST global ===

Channels:
-------------
- mychannel1: [disabled]

    Attributes:
     overwrite mode: 1
     subbufers size: 8192
      number of subbufers: 8
      switch timer interval: 200
      read timer interval: 100
      output: mmap()

    Events:
      None

- channel0: [enabled]

    Attributes:
      overwrite mode: 0
      subbufers size: 4096
      number of subbufers: 4
      switch timer interval: 0
      read timer interval: 200
      output: mmap()

    Events:
      ust_tests_hello:tptest_sighandler (loglevel: TRACE_DEBUG_LINE (13)) (type: tracepoint) [disabled]
      * (type: tracepoint) [enabled]

</COMMAND_OUTPUT>
<COMMAND_INPUT>
lttng list mysession1
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
Tracing session mysession1: [inactive]
    Trace path: /home/user/lttng-traces/mysession1-20120203-133225

</COMMAND_OUTPUT>
</SCENARIO>


####################################################################
# Scenario: Test "lttng list -k" with sample output 
####################################################################
<SCENARIO>
GetKernelProvider1
<COMMAND_INPUT>
lttng list -k
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
Kernel events
-------------
      sched_kthread_stop (loglevel: TRACE_EMERG (0)) (type: tracepoint)
      sched_kthread_stop_ret (loglevel: TRACE_EMERG (0)) (type: tracepoint)
      sched_wakeup_new (loglevel: TRACE_EMERG (0)) (type: tracepoint)

</COMMAND_OUTPUT>
</SCENARIO>

####################################################################
# Scenario: Test "lttng list -u" with sample output 
####################################################################
<SCENARIO>
GetUstProvider1
<COMMAND_INPUT>
lttng list -u
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
UST events:
-------------

PID: 9379 - Name: /home/user/git/lttng-ust/tests/hello.cxx/.libs/lt-hello
    ust_tests_hello:tptest_sighandler (loglevel: TRACE_DEBUG_MODULE (10)) (type: tracepoint)
    ust_tests_hello:tptest (loglevel: TRACE_INFO (6)) (type: tracepoint)

PID: 4852 - Name: /home/user/git/lttng-ust/tests/hello.cxx/.libs/lt-hello
    ust_tests_hello:tptest_sighandler (loglevel: TRACE_WARNING (4)) (type: tracepoint)
    ust_tests_hello:tptest (loglevel: TRACE_DEBUG_FUNCTION (12)) (type: tracepoint)

</COMMAND_OUTPUT>
</SCENARIO>

####################################################################
# Scenario: Test "lttng list -u" with no UST provider available 
####################################################################
<SCENARIO>
GetUstProvider2
<COMMAND_INPUT>
lttng list -u
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
UST events:
-------------
None

</COMMAND_OUTPUT>
</SCENARIO>

####################################################################
# Scenario: Test "lttng create <session>  
####################################################################
<SCENARIO>
CreateSession1
<COMMAND_INPUT>
lttng create mysession2
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
Session mysession2 created.
Traces will be written in /home/user/lttng-traces/mysession2-20120209-095418
</COMMAND_OUTPUT>
</SCENARIO>

####################################################################
# Scenario: Test "lttng create <session>  
####################################################################
<SCENARIO>
CreateSessionWithPrompt
<COMMAND_INPUT>
lttng create mysession2
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
Prompt> Session mysession2 created.
Traces will be written in /home/user/lttng-traces/mysession2-20120209-095418
</COMMAND_OUTPUT>
</SCENARIO>

####################################################################
# Scenario: Test "lttng create <session> with different variants 
# and errors
####################################################################
<SCENARIO>
CreateSessionVariants
<COMMAND_INPUT>
lttng create alreadyExist
</COMMAND_INPUT>
<COMMAND_RESULT>
1
</COMMAND_RESULT>
<COMMAND_OUTPUT>
Error: Session name already exist
</COMMAND_OUTPUT>

<COMMAND_INPUT>
lttng create "session with spaces"
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
Session session with spaces created.
Traces will be written in /home/user/lttng-traces/session with spaces-20120209-095418
</COMMAND_OUTPUT>

<COMMAND_INPUT>
lttng create wrongName
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
Session auto created.
Traces will be written in /home/user/lttng-traces/auto-20120209-095418
</COMMAND_OUTPUT>

<COMMAND_INPUT>
lttng create wrongPath -o /home/user/hallo
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
Session wrongPath created.
Traces will be written in /home/user/lttng-traces/wrongPath-20120209-095418
</COMMAND_OUTPUT>

<COMMAND_INPUT>
lttng create pathWithSpaces -o "/home/user/hallo user/here"
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
Session pathWithSpaces created.
Traces will be written in /home/user/hallo user/here/pathWithSpaces-20120209-095418
</COMMAND_OUTPUT>
</SCENARIO>

####################################################################
# Scenario: Test "lttng destroy <session> 
####################################################################

<SCENARIO>
DestroySession1
<COMMAND_INPUT>
lttng destroy mysession2
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
Session mysession2 destroyed.
</COMMAND_OUTPUT>
</SCENARIO>

####################################################################
# Scenario: Test "lttng enable-channel ..." with different inputs 
####################################################################

<SCENARIO>
ChannelHandling
<COMMAND_INPUT>
lttng enable-channel mychannel0,mychannel1 -k  -s mysession2 --overwrite  --subbuf-size 16384 --num-subbuf 2 --switch-timer 200 --read-timer 100
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
Kernel channel mychannel0 enabled for session mysession2
Kernel channel mychannel1 enabled for session mysession2
</COMMAND_OUTPUT>

<COMMAND_INPUT>
lttng enable-channel ustChannel -u  -s mysession2 --overwrite  --subbuf-size 32768 --num-subbuf 1 --switch-timer 100 --read-timer 200
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
UST channel channel0 enabled for session mysession2
</COMMAND_OUTPUT>

<COMMAND_INPUT>
lttng enable-channel mychannel0,mychannel1 -k  -s mysession2
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
Kernel channel mychannel0 enabled for session mysession2
Kernel channel mychannel1 enabled for session mysession2
</COMMAND_OUTPUT>

<COMMAND_INPUT>
lttng enable-channel ustChannel -u  -s mysession2
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
UST channel mychannel0 enabled for session mysession2
</COMMAND_OUTPUT>

<COMMAND_INPUT>
lttng disable-channel mychannel0,mychannel1 -k  -s mysession2
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
Kernel channel mychannel0 disabled for session mysession2
Kernel channel mychannel1 disabled for session mysession2
</COMMAND_OUTPUT>

<COMMAND_INPUT>
lttng disable-channel ustChannel -u  -s mysession2
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
UST channel mychannel0 enabled for session mysession2
</COMMAND_OUTPUT>
</SCENARIO>


####################################################################
# Scenario: Test "lttng enable-events ..." with different inputs 
####################################################################
<SCENARIO>
EventHandling

# Tracepoint test cases
 
<COMMAND_INPUT>
lttng enable-event block_rq_remap,block_bio_remap,softirq_entry -k  -s mysession2 --tracepoint 
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
kernel event block_rq_remap created in channel channel0
kernel event block_bio_remap created in channel channel0
kernel event softirq_entry created in channel channel0
</COMMAND_OUTPUT>

<COMMAND_INPUT>
lttng enable-event  -a  -k  -s mysession2 -c mychannel --tracepoint 
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
All kernel tracepoints are enabled in channel channel0
</COMMAND_OUTPUT>

<COMMAND_INPUT>
lttng enable-event ust_tests_hello:tptest_sighandler -u  -s mysession2 -c mychannel --tracepoint 
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
UST event ust_tests_hello:tptest_sighandler created in channel mychannel
</COMMAND_OUTPUT>

<COMMAND_INPUT>
lttng enable-event  -a  -u  -s mysession2 -c mychannel --tracepoint 
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
All UST tracepoints are enabled in channel mychannel
</COMMAND_OUTPUT>

# Syscall test cases

<COMMAND_INPUT>
lttng enable-event  -a  -k  -s mysession2 --syscall 
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
All kernel system calls are enabled in channel channel0
</COMMAND_OUTPUT>

<COMMAND_INPUT>
lttng enable-event  -a  -k  -s mysession2 -c mychannel --syscall 
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
All kernel system calls are enabled in channel mychannel
</COMMAND_OUTPUT>

# dynamic probe/function probe test cases

<COMMAND_INPUT>
lttng enable-event myevent0 -k  -s mysession2 --function 0xc0101340
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
kernel event myevent0 created in channel mychannel
</COMMAND_OUTPUT>

<COMMAND_INPUT>
lttng enable-event myevent1 -k  -s mysession2 -c mychannel --probe init_post
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
kernel event myevent1 created in channel mychannel
</COMMAND_OUTPUT>

# log level test cases

<COMMAND_INPUT>
lttng enable-event myevent4 -u  -s mysession2 --loglevel-only TRACE_DEBUG
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
UST event myevent4 created in channel channel0
</COMMAND_OUTPUT>

<COMMAND_INPUT>
lttng enable-event myevent5 -u  -s mysession2 -c mychannel --loglevel TRACE_DEBUG_FUNCTION
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
UST event myevent5 created in channel mychannel
</COMMAND_OUTPUT>

</SCENARIO>

####################################################################
# Scenario: Test "lttng add-context -h" and lttng add-context ..." with different inputs 
####################################################################

<SCENARIO>
ContextHandling

<COMMAND_INPUT>
lttng add-context  -h 
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
usage: lttng add-context -t TYPE

If no channel and no event is given (-c/-e), the context
will be added to all events and all channels.
Otherwise the context will be added only to the channel (-c)
and/or event (-e) indicated.
Exactly one domain (-k/--kernel or -u/--userspace) must be specified.

Options:
  -h, --help               Show this help
      --list-options       Simple listing of options
  -s, --session NAME       Apply to session name
  -c, --channel NAME       Apply to channel
  -e, --event NAME         Apply to event
  -k, --kernel             Apply to the kernel tracer
  -u, --userspace          Apply to the user-space tracer
  -t, --type TYPE          Context type. You can repeat that option on
                           the command line to specify multiple contexts at once.
                           (--kernel preempts --userspace)
                           TYPE can be one of the strings below:
                               pid, procname, prio, nice, vpid, tid, pthread_id,
                               vtid, ppid, vppid, perf:cpu-cycles, perf:cycles
Example:
This command will add the context information 'prio' and two perf
counters (hardware branch misses and cache misses), to all events
in the trace data output:
# lttng add-context -k  -t prio -t perf:branch-misses -t perf:cache-misses

</COMMAND_OUTPUT>

<COMMAND_INPUT>
lttng add-context  -s mysession2 -c mychannel -e ust_tests_hello:tptest_sighandler -u  -t prio -t pid
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
UST context prio added to event ust_tests_hello:tptest_sighandle channel mychannel
UST context pid added to event sched_kthread_stop_ret channel mychannel
</COMMAND_OUTPUT>
</SCENARIO>

<SCENARIO>
ContextErrorHandling

<COMMAND_INPUT>
lttng add-context  -h 
</COMMAND_INPUT>
<COMMAND_RESULT>
1
</COMMAND_RESULT>
<COMMAND_OUTPUT>
usage: lttng add-context -t TYPE

If no channel and no event is given (-c/-e), the context
will be added to all events and all channels.
Otherwise the context will be added only to the channel (-c)
and/or event (-e) indicated.
Exactly one domain (-k/--kernel or -u/--userspace) must be specified.

Options:
  -h, --help               Show this help
      --list-options       Simple listing of options
  -s, --session NAME       Apply to session name
  -c, --channel NAME       Apply to channel
  -e, --event NAME         Apply to event
  -k, --kernel             Apply to the kernel tracer
  -u, --userspace          Apply to the user-space tracer
  -t, --type TYPE          Context type. You can repeat that option on
                           the command line to specify multiple contexts at once.
                           (--kernel preempts --userspace)
                           TYPE can be one of the strings below:
                               pid, procname, prio, nice, vpid, tid, pthread_id,
                               vtid, ppid, vppid, perf:cpu-cycles, perf:cycles
Example:
This command will add the context information 'prio' and two perf
counters (hardware branch misses and cache misses), to all events
in the trace data output:
# lttng add-context -k  -t prio -t perf:branch-misses -t perf:cache-misses

</COMMAND_OUTPUT>

<COMMAND_INPUT>
lttng add-context  -s mysession2 -c mychannel -e ust_tests_hello:tptest_sighandler -u  -t prio -t pid
</COMMAND_INPUT>
<COMMAND_RESULT>
1
</COMMAND_RESULT>
<COMMAND_OUTPUT>
UST context prio added to event ust_tests_hello:tptest_sighandle channel mychannel
UST context pid added to event sched_kthread_stop_ret channel mychannel
</COMMAND_OUTPUT>

</SCENARIO>

<SCENARIO>
CalibrateHandling
<COMMAND_INPUT>
lttng calibrate  -k  --function 
</COMMAND_INPUT>
<COMMAND_RESULT>
0
</COMMAND_RESULT>
<COMMAND_OUTPUT>
Kernel calibration done
</COMMAND_OUTPUT>

<COMMAND_INPUT>
lttng calibrate  -u  --function 
</COMMAND_INPUT>
<COMMAND_RESULT>
1
</COMMAND_RESULT>
<COMMAND_OUTPUT>
Kernel calibration done
</COMMAND_OUTPUT>

</SCENARIO>
